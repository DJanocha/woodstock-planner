//generated by bing.com
type Event = {
  dateStart: Date;
  dateEnd: Date;
  title: string;
};

type EventWithTranslation = Event & { translation: number };

const injectEventsTranslations = (props: {
  events: Event[];
}): EventWithTranslation[] => {
  const sortedEvents = props.events.sort(
    (a, b) => a.dateStart.getTime() - b.dateStart.getTime(),
  );

  const translations: Record<number, number> = {}; // Map to store translations

  sortedEvents.forEach((event, index) => {
    let translation = 0;

    // Check for overlaps with previously iterated events
    for (let i = 0; i < index; i++) {
      const prevEvent = sortedEvents[i];
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      //@ts-ignore
      if (event.dateStart < prevEvent.dateEnd) {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        //@ts-ignore
        translation = Math.max(translation, translations[i] + 1);
      }
    }

    translations[index] = translation;
  });

  // Create EventWithTranslation objects
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  //@ts-ignore
  const eventsWithTranslations: EventWithTranslation[] = sortedEvents.map(
    (event, index) => ({
      ...event,
      translation: translations[index],
    }),
  );

  return eventsWithTranslations;
};

// Example usage:
const events: Event[] = [
  {
    dateStart: new Date("2024-07-30T10:00:00"),
    dateEnd: new Date("2024-07-30T11:00:00"),
    title: "Event A",
  },
  {
    dateStart: new Date("2024-07-30T10:30:00"),
    dateEnd: new Date("2024-07-30T12:00:00"),
    title: "Event B",
  },
  // Add more events as needed
];

const eventsWithTranslations = injectEventsTranslations({ events });
console.log(eventsWithTranslations);
