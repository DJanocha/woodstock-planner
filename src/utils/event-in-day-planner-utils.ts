import { areIntervalsOverlapping } from "date-fns";
import { RouterOutputs } from "~/trpc/react";

//generated by bing.com
type Event = {
  dateStart: Date;
  dateEnd: Date;
  title: string;
};
type EventWithIndex = Event & { index: number };

// Example usage:
const instancesWithEvents: Event[] = [
  {
    dateStart: new Date("2024-07-30T10:00:00"),
    dateEnd: new Date("2024-07-30T11:00:00"),
    title: "Event A",
  },
  {
    dateStart: new Date("2024-07-30T10:30:00"),
    dateEnd: new Date("2024-07-30T12:00:00"),
    title: "Event B",
  },
  // Add more events as needed
];
type InstanceWithEvent = RouterOutputs["events"]["getEventsInstances"][number];
type InstanceWithEventWithIndex = {
  instance: InstanceWithEvent["instance"] & { index: number };
  event: InstanceWithEvent["event"];
};
export function calculateInstancesWithEventIndexes({
  instancesWithEvents,
}: {
  instancesWithEvents: InstanceWithEvent[];
}): InstanceWithEventWithIndex[] {
  const result: InstanceWithEventWithIndex[] = [];
  for (const instanceWithEvent of instancesWithEvents) {
    const collidingEventsWithIndexes = result.filter((resultEvent) =>
      areIntervalsOverlapping(
        {
          start: instanceWithEvent.instance.dateStart,
          end: instanceWithEvent.instance.dateEnd,
        },
        {
          start: resultEvent.instance.dateStart,
          end: resultEvent.instance.dateEnd,
        },
      ),
    );
    const index = collidingEventsWithIndexes.length
      ? Math.max(...collidingEventsWithIndexes.map((e) => e.instance.index)) + 1
      : 0;
    const eventWithIndex: InstanceWithEventWithIndex = {
      instance: { ...instanceWithEvent.instance, index },
      event: instanceWithEvent.event,
    };
    eventWithIndex.instance.index = index;
    console.log({ eventWithIndex, collidingEventsWithIndexes });
    result.push(eventWithIndex);
  }
  return result;
}
export function calculateEventIndexes(events: Event[]): EventWithIndex[] {
  const result: EventWithIndex[] = [];
  for (const event of events) {
    const collidingEventsWithIndexes = result.filter((resultEvent) =>
      areIntervalsOverlapping(
        { start: event.dateStart, end: event.dateEnd },
        { start: resultEvent.dateStart, end: resultEvent.dateEnd },
      ),
    );
    const index = collidingEventsWithIndexes.length
      ? Math.max(...collidingEventsWithIndexes.map((e) => e.index)) + 1
      : 0;
    const eventWithIndex = { ...event, index };
    console.log({ eventWithIndex, collidingEventsWithIndexes });
    result.push(eventWithIndex);
  }
  return result;
}
