/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/4ZAfb8CCaAG
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

import { format } from "date-fns";
import { useAtom } from "jotai";
import {
  HeartIcon,
  MapPinIcon,
  PartyPopperIcon,
  ReceiptTextIcon,
  ShieldQuestionIcon,
  ThumbsDownIcon,
  XIcon,
} from "lucide-react";
import { useCallback, useMemo } from "react";
import { z } from "zod";
import { CollapsibleLargeText } from "~/app/_components/collapsible-large-text";
import {
  userDislikedEventsInstancesAtom,
  userSelectedEventsInstancesAtom,
} from "~/atoms/user-preferences-atom";
import { woodstockEventValidator } from "~/validators/woodstock-event";
import { Button } from "./ui/button";
import { UserPreference } from "~/validators/filtered-events-input";
import { ExcludeFromUnion } from "~/types/common";
import { cn } from "~/lib/utils";

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
export function SingleWoodstockEvent({
  woodstockEvent,
}: {
  woodstockEvent: z.input<typeof woodstockEventValidator>;
}) {
  const { place, description, instances, kind } = woodstockEvent;
  const [dislikedInstancesIds, setDislikedInstancesIds] = useAtom(
    userDislikedEventsInstancesAtom,
  );
  const [selectedEventsIds, setSelectedEventsIds] = useAtom(
    userSelectedEventsInstancesAtom,
  );
  const currentPreference = useMemo(
    () =>
      dislikedInstancesIds.dislikedEventsIds.includes(woodstockEvent.id)
        ? "disliked"
        : "undecided",
    [dislikedInstancesIds],
  );

  const changePreferences = useCallback(
    ({
      newPreference,
    }: {
      newPreference: ExcludeFromUnion<UserPreference, "liked">;
    }) => {
      if (newPreference === currentPreference) {
        return;
      }
      if (newPreference === "disliked") {
        return setDislikedInstancesIds({
          dislikedEventsIds: [
            ...dislikedInstancesIds.dislikedEventsIds,
            woodstockEvent.id,
          ],
        });
      }
      return setDislikedInstancesIds({
        dislikedEventsIds:
          dislikedInstancesIds.dislikedEventsIds.filter(
            (id) => id !== woodstockEvent.id,
          ),
      });
    },
    [
      currentPreference,
      setSelectedEventsIds,
      selectedEventsIds.selectedEventsInstancesIds,
    ],
  );
  const configItems = useMemo((): {
    Icon: typeof MapPinIcon;
    text: string;
    isCollapsible: boolean;
  }[] => {
    return [
      {
        Icon: iconsConfig.eventProperties.kind,
        text: kind,
        isCollapsible: false,
      },
      {
        Icon: iconsConfig.eventProperties.place,
        text: place,
        isCollapsible: false,
      },
      {
        Icon: iconsConfig.eventProperties.description,
        text: description,
        isCollapsible: true,
      },
    ];
  }, ["description", "kind", "place"]);
  const preferencesConfigItems = useMemo<
    {
      icon: typeof MapPinIcon;
      onClick: () => void;
      key: string;
      isActive: boolean;
    }[]
  >(
    () => [
      {
        key: "like",
        icon: iconsConfig.preferences.liked,
        onClick: () => {
          console.log("liking. not really");
        },
        isActive: false,
      },
      {
        key: "undecide",
        icon: iconsConfig.preferences.undecided,
        onClick: () => {
          changePreferences({ newPreference: "undecided" });
        },
        isActive: currentPreference === "undecided",
      },
      {
        key: "dislike",
        icon: iconsConfig.preferences.disliked,
        onClick: () => {
          changePreferences({ newPreference: "disliked" });
        },
        isActive: currentPreference === "disliked",
      },
    ],
    [changePreferences, currentPreference],
  );
  return (
    <div className="h-30 rounded-lg border bg-background p-4 sm:p-6">
      <div className="flex items-start justify-between">
        <div className="flex w-full flex-col items-stretch gap-1">
          <div className="flex w-full flex-row items-start justify-between">
            <h3 className="w-11/12 overflow-ellipsis text-lg font-semibold text-black">
              {woodstockEvent.event}
            </h3>
            <div className="flex flex-row gap-2">
              {preferencesConfigItems.map((preference) => (
                <Button
                  className="w-1/12 p-0"
                  size="icon"
                  asChild
                  variant={"link"}
                  key={preference.key}
                  onClick={preference.onClick}
                >
                  {
                    <preference.icon
                      className={cn(
                        "h-6 w-6",
                        preference.isActive ? "" : "text-gray-500",
                      )}
                    />
                  }
                </Button>
              ))}
            </div>
          </div>
          {configItems.map(({ Icon, text, isCollapsible }) => (
            <div
              className="flex items-start gap-2 text-sm text-muted-foreground"
              key={text}
            >
              <Icon className={"size-6"} />
              {isCollapsible && text.length > 0 ? (
                <CollapsibleLargeText text={text} />
              ) : (
                <span className="flex-1 overflow-ellipsis">{text}</span>
              )}
            </div>
          ))}
        </div>
        <XIcon />
      </div>

      <div className="mt-4 flex flex-wrap items-center gap-2">
        {instances.map((instance) => (
          <div
            key={instance.id}
            className="w-max rounded-full bg-gradient-to-r from-green-500 to-green-600 px-3 py-1 text-xs font-medium text-green-50"
          >
            {format(instance.dateStart, "EEE HH:mm")} -{" "}
            {format(instance.dateEnd, "HH:mm")}
          </div>
        ))}
      </div>
    </div>
  );
}
