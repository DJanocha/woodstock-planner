/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/ehPjDVTl67X
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

import { useMemo } from "react";
import { RouterOutputs } from "~/trpc/react";
import { WoodstockEvent } from "~/validators/woodstock-event";

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
type InstanceWithEvent = RouterOutputs["events"]["getEventsInstances"][number];
export function V6({
  instancesDetails,
}: {
  instancesDetails: InstanceWithEvent[];
}) {
  //   const events = [
  //     {
  //       dateStart: new Date("2024-07-29T10:00:00"),
  //       dateEnd: new Date("2024-07-29T13:00:00"),
  //       kind: "Meeting",
  //       description: "Weekly team meeting",
  //       color: "bg-primary text-primary-foreground",
  //     },
  //     {
  //       dateStart: new Date("2024-07-29T09:00:00"),
  //       dateEnd: new Date("2024-07-29T14:00:00"),
  //       kind: "Call",
  //       description: "Call with supplier",
  //       color: "bg-secondary text-secondary-foreground",
  //     },
  //     {
  //       dateStart: new Date("2024-07-29T10:00:00"),
  //       dateEnd: new Date("2024-07-29T11:30:00"),
  //       kind: "Lunch",
  //       description: "Lunch with client",
  //       color: "bg-muted text-muted-foreground",
  //     },
  //     {
  //       dateStart: new Date("2024-07-29T11:00:00"),
  //       dateEnd: new Date("2024-07-29T12:30:00"),
  //       kind: "Meeting",
  //       description: "Project planning meeting",
  //       color: "bg-card text-card-foreground",
  //     },
  //     {
  //       dateStart: new Date("2024-07-29T12:00:00"),
  //       dateEnd: new Date("2024-07-29T13:30:00"),
  //       kind: "Presentation",
  //       description: "Present quarterly results",
  //       color: "bg-accent text-accent-foreground",
  //     },
  //   ]
  return (
    <div className="bg-background p-4 text-foreground sm:p-6">
      <div className="mx-auto grid max-w-6xl grid-cols-[100px_1fr] gap-4">
        <div className="space-y-4">
          {[...Array(24)].map((_, hour) => (
            <div
              key={hour}
              className="flex items-center justify-center rounded-lg bg-card p-2 text-card-foreground shadow-sm"
            >
              {new Date(
                `2024-07-29T${hour.toString().padStart(2, "0")}:00:00`,
              ).toLocaleTimeString([], {
                hour: "2-digit",
                minute: "2-digit",
              })}
            </div>
          ))}
        </div>
        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-5">
          {[...Array(24)].map((_, hour) => (
            <div key={hour} className="relative grid grid-cols-1 gap-4">
              {instancesDetails.map((instanceDetails, index) => {
                const { event, instance } = instanceDetails;
                const dateStart = new Date(instance.dateStart);
                const dateEnd = new Date(instance.dateEnd);
                const eventStart = dateStart?.getHours();
                const eventEnd = dateEnd.getHours();
                if (hour >= eventStart && hour < eventEnd) {
                  const eventDuration =
                    (dateEnd.getTime() - dateStart.getTime()) /
                    (1000 * 60 * 60);
                  const eventHeight = `h-[${eventDuration * 100}%]`;
                  const eventPosition = `${eventStart - hour >= 0 ? "top-0" : "bottom-0"}`;
                  const eventOrder = `${eventStart - hour >= 0 ? "order-1" : "order-2"}`;
                  return (
                    <div
                      key={index}
                      className={`col-span-1 rounded-lg bg-card p-4 text-card-foreground shadow-sm ${instance.color} ${eventHeight} ${eventPosition} ${eventOrder}`}
                    >
                      <div className="mb-2 flex items-center justify-between">
                        <div className="text-sm font-medium">
                          {dateStart.toLocaleTimeString([], {
                            hour: "2-digit",
                            minute: "2-digit",
                          })}
                          -{" "}
                          {dateEnd.toLocaleTimeString([], {
                            hour: "2-digit",
                            minute: "2-digit",
                          })}
                        </div>
                        <div className="rounded-full px-2 py-1 text-xs font-medium">
                          {event?.kind}
                        </div>
                      </div>
                      <div className="text-sm">{event?.event}</div>
                    </div>
                  );
                }
                return (
                  <div
                    key={index}
                    className="col-span-1 rounded-lg bg-background shadow-sm"
                  />
                );
              })}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
