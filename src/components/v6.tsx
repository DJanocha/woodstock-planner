"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/ehPjDVTl67X
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

import { Scrollbar } from "@radix-ui/react-scroll-area";
import { differenceInMinutes, isBefore, isSameDay, startOfDay } from "date-fns";
import { useEffect, useMemo, useState } from "react";
import { cn } from "~/lib/utils";
import {
  assignRandomBackgroundToElements,
  type WithColors,
} from "~/styles/color-utils";
import { type RouterOutputs } from "~/trpc/react";
import { calculateInstancesWithEventIndexes } from "~/utils/event-in-day-planner-utils";
import { SingleWoodstockEvent } from "./single-woodstock-event";
import { Button } from "./ui/button";
import { Drawer, DrawerContent } from "./ui/drawer";
import { ScrollArea, ScrollBar } from "./ui/scroll-area";
// const randomColors

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
type InstanceWithEvent = RouterOutputs["events"]["getEventsInstances"][number];
type InstanceWithEventWithHorizontalPosition = InstanceWithEvent & {
  horizontalPosition: number;
};
const scrollToInstance = ({ instanceId }: { instanceId: string }) => {
  // Select the element with the specific data attribute
  const element = document.querySelector(
    `[data-event-instance-id="${instanceId}"]`,
  );

  // Check if the element exists
  if (element) {
    // Scroll to the element
    element.scrollIntoView({ behavior: "smooth", block: "start" });
  } else {
    console.log("Element not found");
  }
};

export function V6({
  instancesDetails,
}: {
  instancesDetails: InstanceWithEvent[];
}) {
  const [
    selectedInstanceWithEventWithClassNames,
    setSelectedInstanceWithEventWithClassNames,
  ] = useState<WithColors<InstanceWithEvent> | undefined>();
  const [selectedDate, setSelectedDate] = useState(new Date("2024-07-31"));
  const instancesInSelectedDate = useMemo(
    () =>
      instancesDetails.filter(({ instance }) => {
        const instanceDateStart = new Date(instance.dateStart);
        const instanceDateEnd = new Date(instance.dateEnd);

        const isDuringSameDay =
          isSameDay(instanceDateStart, selectedDate) ||
          isSameDay(instanceDateEnd, selectedDate);
        console.log({
          isDuringSameDay,
          instanceDateStart,
          instanceDateEnd,
          selectedDate,
        });

        return isDuringSameDay;
      }),
    [instancesDetails, selectedDate],
  );

  const instancesWithHorizontalPosition = useMemo(
    () =>
      calculateInstancesWithEventIndexes({
        instancesWithEvents: instancesInSelectedDate,
      }),
    [instancesInSelectedDate],
  );
  const instancesWithHorizontalPositionAndBgColors = useMemo(
    () =>
      assignRandomBackgroundToElements({
        elements: instancesWithHorizontalPosition,
      }),
    [instancesWithHorizontalPosition],
  );
  const handleDateChange = (date: Date) => {
    setSelectedDate(date);
  };
  const firstInstanceId = useMemo(
    () =>
      instancesWithHorizontalPosition.sort((first, second) => {
        return isBefore(first.instance.dateEnd, second.instance.dateEnd)
          ? -1
          : 1;
      })[0]?.instance.id,
    [instancesWithHorizontalPosition],
  );
  useEffect(() => {
    if (firstInstanceId) {
      scrollToInstance({ instanceId: firstInstanceId });
    }
  }, [firstInstanceId]);
  const tenMinuteIntervalsInDay = 24 * 6;

  return (
    // <div className="flex h-full w-full flex-1 flex-grow flex-col justify-between gap-4 bg-background p-4 text-foreground sm:p-6">
    <div className="flex h-[45dvh] w-full flex-1 flex-grow flex-col justify-between gap-4 bg-background p-4 text-foreground sm:p-6">
      <ScrollArea
        className="h-full ring-2 ring-blue-400"
        aria-orientation="vertical"
      >
        <div className="h-full w-min">
          <Scrollbar
            orientation="vertical"
            className="touch-pinch-zoom bg-blue-500"
          />
        </div>
        <div
          className="mx-auto grid max-w-6xl grid-cols-8 gap-4"
          style={{
            gridTemplateRows: `repeat(${tenMinuteIntervalsInDay}, minmax(0, 1fr))`,
          }}
        >
          <div
            className="col-span-1 grid gap-0"
            style={{
              gridTemplateRows: `repeat(${24}, minmax(0, 1fr))`,
              gridRowStart: 1,
              gridRowEnd: `span ${tenMinuteIntervalsInDay}`,
            }}
          >
            {[...Array.from({ length: 24 })].map((_, hour) => {
              return (
                <div
                  key={hour}
                  className="flex flex-col items-center justify-center rounded-none bg-card bg-gray-100 p-2 text-card-foreground shadow-sm ring-1 ring-gray-200 sm:flex-row"
                >
                  <span>{hour.toString().padStart(2, "0")}</span>
                </div>
              );
            })}
          </div>

          <div
            className="col-span-7 grid grid-cols-12 gap-2 overflow-scroll"
            style={{
              gridTemplateRows: `repeat(${tenMinuteIntervalsInDay}, minmax(0, 1fr))`,
              gridRowStart: 1,
              gridRowEnd: `span ${tenMinuteIntervalsInDay}`,
            }}
          >
            {instancesWithHorizontalPositionAndBgColors.map(
              ({ colors, event, instance }) => {
                const dateStart = new Date(instance.dateStart);
                const colStart = instance.index + 1;
                const dateEnd = new Date(instance.dateEnd);
                const tenMinutesSegmentsDiff =
                  differenceInMinutes(dateEnd, dateStart) / 10;
                const tenMinutesFromStartOfDayUntilEventStarts =
                  differenceInMinutes(dateStart, startOfDay(dateStart)) / 10;
                console.log({ instance, event, classNames: colors });

                return (
                  <div
                    key={instance.id}
                    data-event-instance-id={instance.id}
                    // className={`col-start-${colStart} col-span-2 md:col-span-1 row-start-${minutesFromStartOfDayUntilEventStarts + 1} row-span-${minDiff} row-span-1 rounded-lg bg-gray-100 p-4`}
                    className={cn(
                      `col-start-${colStart} col-span-8 md:col-span-2 row-span-${tenMinutesSegmentsDiff} row-span-1 rounded-lg p-4`,
                      colors,
                    )}
                    style={{
                      gridTemplateRows: `repeat(${tenMinuteIntervalsInDay}, minmax(0, 1fr))`,
                      gridRowEnd: `span ${tenMinutesSegmentsDiff} `,
                      gridRowStart: `${tenMinutesFromStartOfDayUntilEventStarts + 1}`,
                    }}
                    onClick={() => {
                      setSelectedInstanceWithEventWithClassNames({
                        event,
                        instance,
                        colors,
                      });
                    }}
                  >
                    <h3 className="text-shadow-sm mb-2 truncate text-sm font-bold shadow-white">
                      {event?.event ?? ""}
                    </h3>
                  </div>
                );
              },
            )}
          </div>
        </div>
      </ScrollArea>
      <div className="overflow-y-hidden">
        <ScrollArea
          className="w-full gap-2 overflow-y-hidden ring-2 ring-pink-400"
          type="scroll"
          aria-orientation="horizontal"
        >
          <div className="flex w-full justify-around space-x-1 px-4 lg:space-x-4">
            {[
              { dateAsString: "2024-07-31", label: "Wednesday" },
              { dateAsString: "2024-08-01", label: "Thursday" },
              { dateAsString: "2024-08-02", label: "Friday" },
              { dateAsString: "2024-07-27", label: "Saturday" },
            ].map(({ dateAsString, label }) => (
              <Button
                variant="outline"
                key={dateAsString} // Corrected the spelling of 'kay' to 'key'
                onClick={() => handleDateChange(new Date(dateAsString))}
              >
                {label}
              </Button>
            ))}
          </div>
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
      </div>
      <Drawer
        open={!!selectedInstanceWithEventWithClassNames?.event}
        onOpenChange={(open) => {
          if (!open) {
            setSelectedInstanceWithEventWithClassNames(undefined);
          }
        }}
      >
        <DrawerContent
          className={cn(
            "border-none p-4 shadow-md",
            selectedInstanceWithEventWithClassNames?.colors ?? "",
          )}
        >
          {selectedInstanceWithEventWithClassNames?.event ? (
            <SingleWoodstockEvent
              woodstockEvent={selectedInstanceWithEventWithClassNames.event}
              shouldHideActionButtons={false}
            />
          ) : null}
        </DrawerContent>
      </Drawer>
    </div>
  );
}
