/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/YyfkYOISv5N
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Button } from "~/components/ui/button"

export function v8() {
  const events = [
    {
      dateStart: new Date("2024-07-29T10:00:00"),
      dateEnd: new Date("2024-07-29T13:00:00"),
      kind: "Meeting",
      description: "Weekly team meeting",
      color: "bg-primary text-primary-foreground",
    },
    {
      dateStart: new Date("2024-07-29T09:00:00"),
      dateEnd: new Date("2024-07-29T14:00:00"),
      kind: "Call",
      description: "Call with supplier",
      color: "bg-secondary text-secondary-foreground",
    },
    {
      dateStart: new Date("2024-07-29T10:00:00"),
      dateEnd: new Date("2024-07-29T11:30:00"),
      kind: "Lunch",
      description: "Lunch with client",
      color: "bg-muted text-muted-foreground",
    },
    {
      dateStart: new Date("2024-07-29T11:00:00"),
      dateEnd: new Date("2024-07-29T12:30:00"),
      kind: "Meeting",
      description: "Project planning meeting",
      color: "bg-card text-card-foreground",
    },
    {
      dateStart: new Date("2024-07-29T12:00:00"),
      dateEnd: new Date("2024-07-29T13:30:00"),
      kind: "Presentation",
      description: "Present quarterly results",
      color: "bg-accent text-accent-foreground",
    },
  ]
  const [selectedDate, setSelectedDate] = useState(new Date("2024-07-29"))
  const handleDateChange = (date) => {
    setSelectedDate(date)
  }
  return (
    <div className="bg-background text-foreground">
      <div className="max-w-6xl mx-auto grid grid-cols-[100px_1fr] gap-4 h-[calc(100vh-theme(spacing.16))] overflow-hidden">
        <div className="space-y-4 bg-card text-card-foreground rounded-lg shadow-sm p-4 sticky top-0">
          {[...Array(24)].map((_, hour) => (
            <div key={hour} className="rounded-lg shadow-sm p-2 flex items-center justify-center">
              {new Date(
                `${selectedDate.toISOString().slice(0, 10)}T${hour.toString().padStart(2, "0")}:00:00`,
              ).toLocaleTimeString([], {
                hour: "2-digit",
                minute: "2-digit",
              })}
            </div>
          ))}
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4 overflow-auto">
          {[...Array(24)].map((_, hour) => (
            <div key={hour} className="grid grid-cols-1 gap-4 relative">
              {events.map((event, index) => {
                const eventStart = event.dateStart.getHours()
                const eventEnd = event.dateEnd.getHours()
                if (hour >= eventStart && hour < eventEnd) {
                  const eventDuration = (event.dateEnd.getTime() - event.dateStart.getTime()) / (1000 * 60 * 60)
                  const eventHeight = `h-[${eventDuration * 100}%]`
                  const eventPosition = `${eventStart - hour >= 0 ? "top-0" : "bottom-0"}`
                  const eventOrder = `${eventStart - hour >= 0 ? "order-1" : "order-2"}`
                  const eventWidth = `w-[${((eventEnd - eventStart) * 100) / 24}%]`
                  const eventLeft = `left-[${(eventStart / 24) * 100}%]`
                  return (
                    <div
                      key={index}
                      className={`bg-card text-card-foreground rounded-lg shadow-sm p-4 col-span-1 ${event.color} ${eventHeight} ${eventPosition} ${eventOrder} ${eventWidth} ${eventLeft}`}
                    >
                      <div className="flex justify-between items-center mb-2">
                        <div className="text-sm font-medium">
                          {event.dateStart.toLocaleTimeString([], {
                            hour: "2-digit",
                            minute: "2-digit",
                          })}
                          -{" "}
                          {event.dateEnd.toLocaleTimeString([], {
                            hour: "2-digit",
                            minute: "2-digit",
                          })}
                        </div>
                        <div className="px-2 py-1 rounded-full text-xs font-medium">{event.kind}</div>
                      </div>
                      <div className="text-sm">{event.description}</div>
                    </div>
                  )
                }
                return <div key={index} className="bg-background rounded-lg shadow-sm col-span-1" />
              })}
            </div>
          ))}
        </div>
      </div>
      <div className="max-w-6xl mx-auto mt-8 sticky bottom-0 bg-background py-4">
        <div className="flex justify-center gap-4">
          <Button variant="outline" onClick={() => handleDateChange(new Date("2024-07-24"))}>
            Wednesday
          </Button>
          <Button variant="outline" onClick={() => handleDateChange(new Date("2024-07-25"))}>
            Thursday
          </Button>
          <Button variant="outline" onClick={() => handleDateChange(new Date("2024-07-26"))}>
            Friday
          </Button>
          <Button variant="outline" onClick={() => handleDateChange(new Date("2024-07-27"))}>
            Saturday
          </Button>
        </div>
      </div>
    </div>
  )
}
